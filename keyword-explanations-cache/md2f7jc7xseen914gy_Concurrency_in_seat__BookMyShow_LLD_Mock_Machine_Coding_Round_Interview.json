{
  "videoId": "md2f7jc7xseen914gy",
  "title": "BookMyShow LLD | Mock Machine Coding Round | Interview Preparation | Chakde System Design ðŸš€ Ep. 16",
  "keyword": "Concurrency in seat booking",
  "explanation": "## Concurrency in seat booking\n\nConcurrency in seat booking refers to the challenge of managing simultaneous requests from multiple users attempting to reserve the same seats in a booking system. This situation can lead to conflicts, such as two users trying to book the same seat at the same time, necessitating strategies to ensure data integrity and a smooth user experience.\n\n### How it applies in this context:\nIn the context of a BookMyShow-like seat allocation system, concurrency is critical as it directly impacts user satisfaction and revenue. When multiple users are trying to book seats, the system must implement strategies such as **seat blocking** and **timeout mechanisms** to prevent double bookings and ensure that seats are released if not confirmed in a timely manner.\n\n### Summary Breakdown:\n- **Concurrency Management**: Handling simultaneous seat booking requests from multiple users to prevent conflicts.\n- **Seat Blocking**: Temporarily reserving seats during the booking process to ensure they are not double-booked.\n- **Release & Timeout Mechanism**: Automatically freeing up seats if a user navigates away or after a period of inactivity.\n- **Data Integrity**: Ensuring that the booking system maintains accurate seat availability and prevents race conditions.\n- **User Experience**: Enhancing the booking process to be smooth and responsive, minimizing frustration for users.\n\n### Diagram:\n```mermaid\nsequenceDiagram\n    participant User1\n    participant User2\n    participant BookingSystem\n    User1->>BookingSystem: Request to book Seat A1\n    User2->>BookingSystem: Request to book Seat A1\n    BookingSystem->>User1: Block Seat A1\n    BookingSystem->>User2: Notify Seat A1 is unavailable\n    User1->>BookingSystem: Confirm booking\n    BookingSystem->>User1: Confirm booking for Seat A1\n    User1->>BookingSystem: Seat A1 released after timeout\n    BookingSystem->>User2: Notify Seat A1 is now available\n```\n\n### Code Example (if applicable):\n```javascript\nclass SeatBookingSystem {\n    constructor() {\n        this.seats = {}; // Object to hold seat availability\n    }\n\n    bookSeat(seatId, userId) {\n        if (this.seats[seatId] && this.seats[seatId].isBlocked) {\n            return `Seat ${seatId} is currently unavailable.`;\n        }\n        this.seats[seatId] = { isBlocked: true, userId };\n        setTimeout(() => this.releaseSeat(seatId), 30000); // Release seat after 30 seconds\n        return `Seat ${seatId} has been blocked for user ${userId}.`;\n    }\n\n    releaseSeat(seatId) {\n        if (this.seats[seatId]) {\n            this.seats[seatId].isBlocked = false;\n            this.seats[seatId].userId = null;\n            console.log(`Seat ${seatId} has been released.`);\n        }\n    }\n}\n\n// Example usage\nconst bookingSystem = new SeatBookingSystem();\nconsole.log(bookingSystem.bookSeat('A1', 'User1')); // Blocks seat A1 for User1\nconsole.log(bookingSystem.bookSeat('A1', 'User2')); // Notifies User2 that seat A1 is unavailable\n```",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-14T15:28:35.742Z"
}