{
  "videoId": "4ijjIUeq6hE",
  "title": "Google Interview Question | System Design: Digital Wallet (3+ Approaches)",
  "keyword": "2-phase-commit",
  "explanation": "## 2-phase-commit\n\nThe 2-phase commit (2PC) protocol is a distributed algorithm that ensures all participants in a distributed transaction either commit or abort the transaction in a coordinated manner. In the first phase, a coordinator node sends a \"prepare\" request to all participant nodes, and they respond with a vote to either commit or abort. In the second phase, if all participants vote to commit, the coordinator sends a \"commit\" command; otherwise, it sends an \"abort\" command.\n\n### How it applies in this context:\nIn the context of a digital wallet system, the 2-phase commit protocol can be crucial for ensuring atomicity and consistency across distributed transactions, especially when handling operations that involve multiple services (like the Transaction Service and Wallet Service). While the video emphasizes using the Saga pattern for managing distributed transactions, understanding 2PC is essential as it provides a traditional method for achieving strong consistency, particularly when implementing features that require strict transaction guarantees.\n\n### Diagram:\n```mermaid\nsequenceDiagram\n    participant C as Coordinator\n    participant P1 as Participant 1\n    participant P2 as Participant 2\n\n    C->>P1: Prepare Transaction\n    C->>P2: Prepare Transaction\n    P1-->>C: Vote Commit\n    P2-->>C: Vote Commit\n    C->>P1: Commit Transaction\n    C->>P2: Commit Transaction\n```\n\n### JavaScript Example:\nHereâ€™s a simple JavaScript example that illustrates the basic logic of a 2-phase commit protocol using promises to simulate the asynchronous nature of network calls.\n\n```javascript\nclass Participant {\n    constructor(name) {\n        this.name = name;\n        this.vote = null;\n    }\n\n    prepare() {\n        // Simulate a decision on whether to commit or abort\n        this.vote = Math.random() > 0.5 ? 'commit' : 'abort';\n        return this.vote;\n    }\n}\n\nclass Coordinator {\n    constructor(participants) {\n        this.participants = participants;\n    }\n\n    async executeTransaction() {\n        const votes = await Promise.all(this.participants.map(p => p.prepare()));\n        \n        if (votes.every(vote => vote === 'commit')) {\n            this.commit();\n        } else {\n            this.abort();\n        }\n    }\n\n    commit() {\n        console.log(\"All participants voted to commit. Transaction committed.\");\n    }\n\n    abort() {\n        console.log(\"At least one participant voted to abort. Transaction aborted.\");\n    }\n}\n\n// Example usage\nconst participant1 = new Participant(\"Participant 1\");\nconst participant2 = new Participant(\"Participant 2\");\nconst coordinator = new Coordinator([participant1, participant2]);\n\ncoordinator.executeTransaction();\n```\n\nThis code simulates a 2-phase commit protocol where two participants prepare their votes, and the coordinator decides whether to commit or abort the transaction based on the votes received.",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-13T16:52:02.573Z"
}