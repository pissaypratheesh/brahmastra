{
  "videoId": "jtzsq8hhwmd3cis8r",
  "title": "google docs like system design",
  "keyword": "CRDTs",
  "explanation": "## CRDTs\n\nConflict-free Replicated Data Types (CRDTs) are data structures designed for distributed systems that allow for concurrent updates without requiring coordination between replicas. They ensure that all changes can be applied in any order and will eventually converge to the same state, effectively resolving conflicts automatically.\n\n### How it applies in this context:\nIn the context of designing a real-time collaborative text editor, CRDTs provide a robust mechanism for managing concurrent edits from multiple users. By allowing updates to be applied independently and ensuring eventual consistency, CRDTs simplify the complexity of conflict resolution, making it easier to maintain a coherent document state across all users.\n\n### Summary Breakdown:\n- **Real-Time Collaboration**: The ability for multiple users to edit a document simultaneously.\n- **Conflict-free Replicated Data Types (CRDTs)**: Data structures that automatically resolve conflicts in distributed systems.\n- **Operational Transformation (OT)**: An alternative method to reconcile concurrent edits by transforming operations to maintain consistency.\n- **WebSockets**: A protocol enabling real-time, bidirectional communication between clients and servers.\n- **Version Management**: Techniques for tracking document changes and managing different versions efficiently.\n- **Offline Support**: Mechanisms that allow users to edit documents without an internet connection, with synchronization upon reconnection.\n\n### Diagram:\n```mermaid\nclassDiagram\n    class CRDT {\n        +apply(operation)\n        +merge(otherCRDT)\n        +getState()\n    }\n\n    class User {\n        +editDocument()\n        +sendEdit()\n        +receiveEdit()\n    }\n\n    class Document {\n        +content\n        +lastModified\n        +version\n    }\n\n    User --> Document : edits\n    Document --> CRDT : manages state\n    CRDT --> User : syncs changes\n```\n\n### Code Example (if applicable):\n```javascript\nclass CRDT {\n    constructor() {\n        this.state = new Map();\n    }\n\n    apply(operation) {\n        // Apply the operation to the current state\n        this.state.set(operation.id, operation.value);\n    }\n\n    merge(otherCRDT) {\n        // Merge the state of another CRDT into this one\n        otherCRDT.state.forEach((value, key) => {\n            this.state.set(key, value);\n        });\n    }\n\n    getState() {\n        return Array.from(this.state.entries());\n    }\n}\n\n// Example usage\nconst crdt1 = new CRDT();\ncrdt1.apply({ id: '1', value: 'Hello' });\n\nconst crdt2 = new CRDT();\ncrdt2.apply({ id: '2', value: 'World' });\n\ncrdt1.merge(crdt2);\nconsole.log(crdt1.getState()); // Outputs: [['1', 'Hello'], ['2', 'World']]\n```\n\nThis code example illustrates a basic implementation of a CRDT that can apply operations, merge states from other CRDTs, and retrieve the current state.",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-14T17:07:07.197Z"
}