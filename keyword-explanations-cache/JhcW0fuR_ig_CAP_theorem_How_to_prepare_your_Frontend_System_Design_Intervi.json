{
  "videoId": "JhcW0fuR_ig",
  "title": "How to prepare your Frontend System Design Interview",
  "keyword": "CAP theorem",
  "explanation": "## CAP theorem\n\nThe **CAP theorem**, also known as Brewer's theorem, states that in a distributed data store, it is impossible to simultaneously guarantee all three of the following properties: **Consistency**, **Availability**, and **Partition Tolerance**. This means that a system can only provide two of these three guarantees at any given time, leading to trade-offs in system design.\n\n### How it applies in this context:\nIn the context of designing a platform similar to LeetCode, the CAP theorem is crucial when considering the **non-functional requirements** of the system. The emphasis on prioritizing **availability** over **consistency** suggests that during high-load scenarios, such as coding competitions, the system may choose to serve requests even if it means some data might be temporarily inconsistent. This trade-off is essential for ensuring a smooth user experience.\n\n### Summary Breakdown:\n- **Functional Requirements** include user interactions such as viewing and submitting **coding problems**.\n- **Non-Functional Requirements** highlight the importance of **availability** and the implications of the **CAP theorem** in system design.\n- The system's architecture may start as a **monolithic** design with the potential for transitioning to **microservices** for scalability.\n- Security measures involve isolating user code execution using **Docker containers** to mitigate risks.\n- A **message queue** (e.g., AWS SQS) is proposed to manage submission loads during peak times.\n- **Redis** is suggested for maintaining an efficient **leaderboard** using sorted sets.\n\n### Diagram:\n```mermaid\ngraph TD\n    A[CAP Theorem] --> B[Consistency]\n    A --> C[Availability]\n    A --> D[Partition Tolerance]\n    B --> E{Choose Any Two}\n    C --> E\n    D --> E\n    E --> F[Trade-offs in System Design]\n    F --> G[Example: LeetCode-like Platform]\n```\n\n### Code Example (if applicable):\n```javascript\n// Example of checking availability over consistency in a distributed system\nasync function fetchData() {\n    try {\n        const response = await fetch('/api/data');\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        return data; // May not be the latest due to availability focus\n    } catch (error) {\n        console.error('Fetch error:', error);\n        return null; // Handle error gracefully\n    }\n}\n```\nThis code example demonstrates a simple fetch operation that prioritizes availability by returning data even if it may not be the most current, reflecting the trade-offs highlighted in the CAP theorem.",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-13T17:34:37.844Z"
}