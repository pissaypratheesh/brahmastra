{
  "videoId": "JhcW0fuR_ig",
  "title": "How to prepare your Frontend System Design Interview",
  "keyword": "sorted sets",
  "explanation": "## sorted sets\n\nA **sorted set** is a data structure that maintains a collection of unique elements, each associated with a score, allowing for efficient retrieval of elements in a sorted order based on their scores. This structure supports operations like adding, removing, and querying elements while maintaining their sorted state, making it ideal for scenarios like leaderboards or ranking systems.\n\n### How it applies in this context:\nIn the context of the video, **sorted sets** are utilized to efficiently manage and access leaderboard rankings for coding competitions. By storing user scores in a sorted set, the platform can quickly retrieve the top performers and update rankings in real-time, enhancing user experience during competitions.\n\n### Summary Breakdown:\n- **Functional Requirements** include user interactions such as viewing and selecting a list of **coding problems** and submitting **solutions**.\n- The system design emphasizes **security** by isolating user code execution in **Docker containers**.\n- **APIs** are crucial for user interactions, with operations like **GET** for problem retrieval and **POST** for submitting solutions.\n- **High-Level Design (HLD)** starts with CRUD operations, suggesting a **monolithic architecture** that may evolve into **microservices**.\n- **Sorted sets** in **Redis** are leveraged for maintaining an efficient **leaderboard**, improving query performance.\n- Emphasis on **CI/CD** pipelines for continuous integration and deployment of system updates.\n\n### Diagram:\n```mermaid\nclassDiagram\n    class User {\n        +userId: String\n        +username: String\n        +score: Number\n    }\n\n    class Problem {\n        +problemId: String\n        +description: String\n        +difficulty: String\n    }\n\n    class Submission {\n        +submissionId: String\n        +userId: String\n        +problemId: String\n        +timestamp: Date\n    }\n\n    class Competition {\n        +competitionId: String\n        +startTime: Date\n        +endTime: Date\n    }\n\n    User --> Submission : \"submits\"\n    Problem --> Submission : \"is solved by\"\n    Competition --> User : \"participants\"\n    Competition --> Problem : \"includes\"\n```\n\n### Code Example (if applicable):\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\n// Function to add a score for a user in the leaderboard\nfunction addScore(userId, score) {\n    client.zadd('leaderboard', score, userId, (err, response) => {\n        if (err) {\n            console.error('Error adding score:', err);\n        } else {\n            console.log('Score added:', response);\n        }\n    });\n}\n\n// Function to get the top N users from the leaderboard\nfunction getTopUsers(N) {\n    client.zrevrange('leaderboard', 0, N - 1, 'WITHSCORES', (err, topUsers) => {\n        if (err) {\n            console.error('Error fetching top users:', err);\n        } else {\n            console.log('Top users:', topUsers);\n        }\n    });\n}\n\n// Example usage\naddScore('user123', 150);\ngetTopUsers(5);\n```",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-13T17:35:36.943Z"
}