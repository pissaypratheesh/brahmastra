{
  "videoId": "4ijjIUeq6hE",
  "title": "Google Interview Question | System Design: Digital Wallet (3+ Approaches)",
  "keyword": "item potency",
  "explanation": "## Item Potency\n\nItem potency refers to the property of an operation that allows it to be applied multiple times without changing the result beyond the initial application. In the context of distributed systems, it ensures that a request (like a transaction) can be retried without the risk of unintended side effects, thereby guaranteeing that the operation will have the same effect regardless of how many times it is executed.\n\n### How it applies in this context:\nIn the design of the Digital Wallet System, item potency is crucial for ensuring that financial transactions are processed reliably, even in the face of failures or retries. By using unique identifiers for each transaction (idempotency keys), the system can safely handle duplicate requests, ensuring that funds are transferred exactly once and maintaining accurate account balances. This is particularly important in high-volume environments where transaction retries may occur due to network issues or service interruptions.\n\n### Diagram:\n```mermaid\nsequenceDiagram\n    participant User\n    participant WalletService\n    participant TransactionService\n\n    User->>WalletService: Initiate Transaction (amount, receiverID, idempotencyKey)\n    WalletService->>TransactionService: Process Transaction (amount, receiverID, idempotencyKey)\n    alt Transaction Successful\n        TransactionService-->>WalletService: Confirm Transaction Success\n        WalletService-->>User: Transaction Completed\n    else Transaction Already Processed\n        TransactionService-->>WalletService: Return Existing Transaction Result\n        WalletService-->>User: Transaction Already Processed\n    end\n```\n\nThis sequence diagram illustrates the interaction between the user, the wallet service, and the transaction service, highlighting how item potency is utilized to ensure that repeated transaction requests are handled correctly, either by processing them or returning the result of a previously completed transaction. \n\n### Code Example in JavaScript\nHereâ€™s a simple example of how item potency can be implemented in a JavaScript-based transaction service:\n\n```javascript\nconst transactions = new Map(); // Store transactions with idempotency keys\n\nfunction processTransaction(userId, amount, receiverId, idempotencyKey) {\n    // Check if the transaction has already been processed\n    if (transactions.has(idempotencyKey)) {\n        return { status: 'already_processed', transactionId: transactions.get(idempotencyKey) };\n    }\n\n    // Perform the transaction logic (e.g., deduct amount, credit receiver)\n    const transactionId = createTransaction(userId, amount, receiverId);\n    \n    // Store the transaction with the idempotency key\n    transactions.set(idempotencyKey, transactionId);\n    \n    return { status: 'success', transactionId };\n}\n\nfunction createTransaction(userId, amount, receiverId) {\n    // Logic to create and store the transaction in the database\n    // For demonstration, we return a mock transaction ID\n    return Math.random().toString(36).substr(2, 9); // Mock transaction ID\n}\n```\n\nIn this code, the `processTransaction` function checks if a transaction with the given `idempotencyKey` has already been processed. If it has, it returns the existing transaction result, ensuring that the same transaction cannot affect the system state more than once.",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-13T16:55:25.900Z"
}