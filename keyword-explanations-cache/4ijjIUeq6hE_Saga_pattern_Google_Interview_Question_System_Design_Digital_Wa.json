{
  "videoId": "4ijjIUeq6hE",
  "title": "Google Interview Question | System Design: Digital Wallet (3+ Approaches)",
  "keyword": "Saga pattern",
  "explanation": "## Saga pattern\n\nThe **Saga pattern** is a design pattern used to manage distributed transactions by breaking them down into a series of smaller, independent transactions. Each of these transactions can be executed in sequence, and if any transaction fails, compensating transactions are triggered to undo the effects of the preceding transactions, thus ensuring eventual consistency across the system.\n\n### How it applies in this context:\nIn the context of the **Digital Wallet System**, the Saga pattern is preferred over traditional consensus algorithms like Raft for handling distributed transactions. It allows for robust transaction management by enabling the system to perform compensating actions in case of failures, thus maintaining data integrity and consistency while supporting high transaction throughput.\n\n### Summary Breakdown:\n- The **Saga pattern** facilitates the management of **distributed transactions** without the overhead of consensus algorithms.\n- The architecture includes a **Transaction Service** for managing transaction records and a **Wallet Service** for maintaining user account balances.\n- **Sharding** is employed to distribute load effectively, using account IDs as partition keys to prevent hot partitions.\n- **Idempotency** is crucial for ensuring that transactions are processed exactly once, preventing duplicate operations.\n- **Change Data Capture (CDC)** is utilized to propagate changes efficiently across services and support analytical queries without impacting performance.\n- The system is designed for **fault tolerance** with mechanisms for retries and compensating transactions, ensuring resilience against failures.\n\n### Diagram:\n```mermaid\nsequenceDiagram\n    participant User\n    participant WalletService\n    participant TransactionService\n    participant CompensatingService\n\n    User->>WalletService: Initiate Transaction\n    WalletService->>TransactionService: Create Transaction Record\n    TransactionService-->>WalletService: Transaction Created\n    WalletService->>User: Confirm Transaction\n\n    alt Transaction Fails\n        TransactionService->>CompensatingService: Trigger Compensating Transaction\n        CompensatingService-->>TransactionService: Compensating Transaction Executed\n    end\n```\n\n### Code Example (if applicable):\n```javascript\nasync function executeSaga(operations) {\n    const compensatingActions = [];\n\n    for (const operation of operations) {\n        try {\n            await operation.execute();\n            compensatingActions.push(operation.compensate);\n        } catch (error) {\n            console.error(\"Operation failed, executing compensating actions\", error);\n            for (const compensate of compensatingActions.reverse()) {\n                await compensate();\n            }\n            throw new Error(\"Saga execution failed and compensated\");\n        }\n    }\n}\n\n// Example operations\nconst operations = [\n    {\n        execute: async () => { /* Logic for operation 1 */ },\n        compensate: async () => { /* Logic to undo operation 1 */ }\n    },\n    {\n        execute: async () => { /* Logic for operation 2 */ },\n        compensate: async () => { /* Logic to undo operation 2 */ }\n    }\n];\n\n// Execute the saga\nexecuteSaga(operations).catch(err => console.error(err));\n``` \n\nThis response succinctly captures the essence of the Saga pattern, its relevance to the digital wallet system, and provides a clear visual representation along with a practical code example.",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-13T17:23:07.186Z"
}