{
  "videoId": "4ijjIUeq6hE",
  "title": "Google Interview Question | System Design: Digital Wallet (3+ Approaches)",
  "keyword": "database schema",
  "explanation": "## Database Schema\n\nA **database schema** is the organizational blueprint of a database that defines how data is structured, including the tables, fields, relationships, and constraints that govern the data. It serves as a framework for how data is stored, accessed, and manipulated, ensuring consistency and integrity across the database.\n\n### How it applies in this context:\nIn the context of the digital wallet system, the database schema is crucial for managing user accounts and transactions efficiently. It delineates the structure of the Transaction and Wallet databases, specifying how transaction records (like sender, receiver, amount, and transaction ID) are organized and how they relate to user account balances. A well-defined schema supports scalability, consistency, and the implementation of features such as idempotency and strong read guarantees.\n\n### Diagram:\n```mermaid\nclassDiagram\n    class User {\n        +int userId\n        +string username\n        +decimal balance\n    }\n\n    class Transaction {\n        +int transactionId\n        +int senderId\n        +int receiverId\n        +decimal amount\n        +string status\n        +date timestamp\n    }\n\n    User \"1\" -- \"0..*\" Transaction : initiates >\n    User \"1\" -- \"0..*\" Transaction : receives >\n```\n\n### Code Example in JavaScript\nHereâ€™s a simple example of how you might define a user and transaction schema using a JavaScript object-oriented approach:\n\n```javascript\nclass User {\n    constructor(userId, username, balance) {\n        this.userId = userId;\n        this.username = username;\n        this.balance = balance;\n    }\n\n    updateBalance(amount) {\n        this.balance += amount;\n    }\n}\n\nclass Transaction {\n    constructor(transactionId, senderId, receiverId, amount) {\n        this.transactionId = transactionId;\n        this.senderId = senderId;\n        this.receiverId = receiverId;\n        this.amount = amount;\n        this.status = 'Pending'; // Can be 'Pending', 'Completed', 'Failed'\n        this.timestamp = new Date();\n    }\n\n    completeTransaction() {\n        this.status = 'Completed';\n    }\n}\n\n// Example Usage\nlet user1 = new User(1, 'Alice', 1000);\nlet user2 = new User(2, 'Bob', 500);\nlet transaction = new Transaction(101, user1.userId, user2.userId, 200);\n\n// Update balances and complete transaction\nuser1.updateBalance(-transaction.amount);\nuser2.updateBalance(transaction.amount);\ntransaction.completeTransaction();\n\nconsole.log(user1, user2, transaction);\n```\n\nThis example illustrates how the database schema can be represented in code, defining the relationships and behaviors of users and transactions within the digital wallet system.",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-13T17:22:03.859Z"
}