{
  "videoId": "9vnos7wffmd3bxzoj",
  "title": "google docs system design",
  "keyword": "CRDTs",
  "explanation": "## CRDTs\n\nConflict-free Replicated Data Types (CRDTs) are data structures designed for distributed systems that allow multiple users to concurrently update data without requiring coordination between them. They ensure eventual consistency by allowing operations to be applied in any order, automatically resolving conflicts that may arise from concurrent updates.\n\n### How it applies in this context:\nIn the context of designing a real-time collaborative text editor, CRDTs enable seamless concurrent editing by allowing multiple users to make changes simultaneously without the need for locks or centralized coordination. This leads to a more responsive user experience and simplifies the handling of conflicts, making it an ideal choice alongside Operational Transformation (OT) for maintaining consistency in collaborative environments.\n\n### Summary Breakdown:\n- **CRDTs** allow for concurrent updates in distributed systems, ensuring **eventual consistency** without centralized control.\n- They simplify **conflict resolution** by enabling operations to be applied in any order, which is crucial for real-time collaboration.\n- **WebSockets** are utilized for real-time, bidirectional communication between clients and servers, facilitating immediate updates.\n- **Version History** management is essential for tracking changes, often using data structures like **Merkle Trees**.\n- **Offline Support** mechanisms are implemented to allow users to work without an internet connection, synchronizing changes when connectivity is restored.\n- A **Microservices Architecture** enhances scalability and maintainability by separating different components of the system.\n\n### Diagram:\n```mermaid\ngraph TD\n    A[User A] -- Edit Document --> B[CRDT]\n    A -- Send Update --> C[WebSocket]\n    B -- Apply Change --> D[Document State]\n    E[User B] -- Edit Document --> B\n    E -- Send Update --> C\n    B -- Apply Change --> D\n    D -- Sync Changes --> F[Database]\n```\n\n### Code Example (if applicable):\n```javascript\nclass CRDT {\n    constructor() {\n        this.state = new Map(); // Using a Map to store changes\n    }\n\n    // Apply an operation\n    apply(op) {\n        const { key, value } = op;\n        this.state.set(key, value);\n    }\n\n    // Merge another CRDT's state\n    merge(otherCRDT) {\n        for (const [key, value] of otherCRDT.state.entries()) {\n            if (!this.state.has(key) || this.state.get(key) < value) {\n                this.state.set(key, value);\n            }\n        }\n    }\n\n    // Get the current state\n    getState() {\n        return this.state;\n    }\n}\n\n// Example usage\nconst crdt1 = new CRDT();\ncrdt1.apply({ key: 'text', value: 'Hello' });\n\nconst crdt2 = new CRDT();\ncrdt2.apply({ key: 'text', value: 'World' });\n\ncrdt1.merge(crdt2);\nconsole.log(crdt1.getState()); // Output: Map { 'text' => 'World' }\n```\n\nThis code example demonstrates a simple implementation of a CRDT that allows for concurrent updates and merging of states from different users, ensuring eventual consistency in a collaborative environment.",
  "model": "gpt-4o-mini",
  "generatedAt": "2025-07-14T16:41:36.744Z"
}