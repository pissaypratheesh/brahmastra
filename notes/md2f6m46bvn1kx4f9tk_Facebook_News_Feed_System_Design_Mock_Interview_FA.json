{
  "id": "md2f6m46bvn1kx4f9tk",
  "topic": "Facebook News Feed System Design | Mock Interview FAANG 2025",
  "content": "**1) Filtered Resources (technical links only):**\n\n- [Advanced System Design HLD + LLD Course](https://courses.algocamp.io/learn/Advanced-System-Design-2025)\n- [Lambda 4.0 | Ultimate Backend, Cloud & DevOps Course](https://courses.algocamp.io/learn/backend-development-in-node)\n- [Complete UBER SDE 2 Interview Process 2025 | Backend Engineer](https://youtu.be/pqdp7_ZKYKk)\n- [Stock Trading App System Design Interview | Meta System Design](https://youtu.be/a5rABvMQ53U)\n- [YouTube Channel: AlgoCamp](https://www.youtube.com/@AlgoCampLearn)\n\n**2) Video Overview:**\n\nThe video is a detailed mock system design interview featuring a Google Software Engineer. It simulates a system design problem focusing on creating a scalable feed service similar to LinkedIn or Facebook. The session covers both high-level design (HLD) and low-level design (LLD) aspects, aiming to prepare viewers for real-world system design interviews. The interaction highlights crucial strategies and considerations, including scalability, handling edge cases, and ensuring speed and efficiency in service design.\n\n**3) Detailed Technical Content:**\n\n**Introduction to the Problem Statement:**\n\n- The task is to design a system to handle a feed service similar to social media platforms like LinkedIn, where users can create posts, and these are subsequently shown in a feed to other users.\n- **Functional Requirements**: \n  - Ability to create a post.\n  - Display posts in the feed in reverse chronological order.\n- **Non-Functional Requirements**: \n  - Fast feed generation to ensure low latency user experience (sub-500ms operation time).\n\n**System Design High-Level Design (HLD):**\n\n- **Core Components**: User system, Post system, Feed generation system.\n- **API Design**:\n  -  – for creating posts. The service accepts content, post type (text, image), etc.\n  -  – for fetching the feed, delivering content tailored to a user’s connections.\n- **Design Patterns**: Use of API gateway for handling requests to different services and load balancing. Employing distributed and asynchronous processes.\n\n**Low-Level Design (LLD)**:\n\n- **Entity Definitions**:\n  - **User Entity**: Represents users who can follow others or be followed.\n  - **Post Entity**: Consists of post content, metadata (creation time, user who posted), stored in a NoSQL database for flexibility and scalability.\n- **Database Solutions**:\n  - Using a **Graph Database** for storing user relationships and efficiently querying friend connections, leveraging tools like Neo4j.\n  - Employing **NoSQL Database** for quick read and write operations, containing post data points and associated metadata.\n  - Usage of **Redis** for caching purposes to quickly serve feeds without always querying the database.\n\n**Design Walkthrough**:\n\n1. **Create Post Workflow**:\n   - User action initiates an API call to create a post.\n   - Post service interacts with a database to save post details.\n   - Supplementary process employs a fan-out architecture to update feeds.\n   \n2. **Feed Generation Workflow**:\n   - Retrieval process separated into discrete steps: pull user’s connection list, obtain posts, sort them, and serve in the desired format.\n   - Cached pre-generated feeds are retrieved, minimizing live computation.\n\n3. **Scalability**:\n   - Horizontal scaling of services (especially post and feed services) to handle a large number of user requests.\n   - Redis caching with sharding ensures scalability of the data cache layer.\n\n4. **Failure and Consistency**:\n   - **Eventual Consistency**: Strategy employed ensuring data correctness over time, allowing brief windows for propagation.\n   - Challenges managed include consistency in heavy-traffic scenarios, especially for users with large audiences (fan-out issue addressed with push-pull mechanisms).\n\n**Key Technical Decisions**:\n\n- **Graph DB Choice**: Opted for handling intricate relationships like user follow graphs due to their optimized query capabilities for connected data sets.\n- **NoSQL Advantage**: Chosen for its flexibility and speed in handling data structuring without rigid schema requirements.\n- **Caching Strategy**: Integral for maintaining low-latency response times, particularly critical for delivering real-time feed experiences.\n\n**4) Key Takeaways:**\n\n- The recording emphasizes the consideration of scalability and optimized data retrieval strategies in designing large web systems.\n- The chosen architecture—integrating key-value stores, graph databases, and directed caching—highlights typical design patterns in high throughput systems.\n- The interview reinforces the importance of balancing complexity with practical solutions, such as employing eventual consistency to tackle real-world constraints.\n- The session serves as an instructive guide for preparing system design interviews, equipping aspirants with a thoughtful approach to dissecting design problems and structuring efficient high-level and low-level system plans.",
  "createdAt": "2025-07-14T01:23:35.670Z",
  "updatedAt": "2025-07-14T01:23:35.670Z",
  "tags": [
    "redis",
    "system-design",
    "social-media",
    "streaming-media",
    "interview-prep",
    "chat-messaging",
    "code-editor"
  ]
}