{
  "id": "md2f6y68yvrwf1u4s7",
  "topic": "System Design Interview: Design FB News Feed w/ ex: Meta Senior Manager",
  "content": "### Filtered Resources\n\n1. **Guided Practice on System Design**: [Guided Practice](https://www.hellointerview.com/practice)\n2. **Detailed System Design Write-up**: [News Feed System Design](https://www.hellointerview.com/learn/system-design/answer-keys/fb-news-feed)\n3. **System Design Introduction**: [System Design In a Hurry](https://www.hellointerview.com/learn/system-design/in-a-hurry/introduction)\n4. **Excalidraw for Design Diagrams**: [Excalidraw Tool](https://link.excalidraw.com/l/56zGeHiLyKZ/78XyjBt0ZnJ)\n\n### Video Overview\n\nThis YouTube video, led by Stefan, a former senior manager at Meta and co-founder of Hello Interview, provides an in-depth breakdown of designing a news feed systemâ€”a common interview question at tech firms. The session emphasizes practical approaches using essential system design principles such as data modeling, high-level and low-level design, API development, and capacity planning, to solve the problem.\n\n### Detailed Technical Content\n\n#### Requirements Analysis\n\n- **Functional Requirements**:\n  - **Post Creation:** Users should be able to create and submit posts.\n  - **User Interactions:** They can follow other users and view posts from those they follow.\n  - **Feed Display:** Users require a chronological feed to display posts.\n\n- **Non-Functional Requirements**:\n  - **Scalability**: Must handle a large user base efficiently.\n  - **Availability and Consistency**: Favor slightly eventual consistency to ensure swift updates in feeds.\n  - **Performance**: Target latency is 500 ms for operations to maintain a responsive user interface.\n  - **Volume Considerations**: Assumes handling over 2 billion users akin to platforms like Facebook.\n\n#### Core Entities and Data Model\n\n- **Entities**: \n  - **User**: Representing the clients interacting with the system.\n  - **Post**: Contains content by users and tied to timestamps.\n  - **Follow Relationship**: Maps the following connections between users.\n\n- **Database Choice**:\n  - Suggests using NoSQL databases like DynamoDB or Cassandra suitable for high throughput and large-scale data handling.\n\n#### API Design\n\n- **CRUD Operations**:\n  - **Create Post**: RESTful API endpoint , returns the success state and post ID on creation.\n  - **Follow User**: Allows a user to follow others using .\n  - **Retrieve Feed**: Implements  with pagination to enable chronological feed browsing, using a cursor for state management.\n\n#### High-Level Design (HLD)\n\n- **Services**:\n  - **Post Service**: Accepts post creation requests and writes data to a backend database.\n  - **Follow Service**: Manages user connections and keeps track in a dedicated follow table.\n  - **Feed Service**: Handles read requests to generate news feeds; a read-heavy service aimed to optimize access to stored posts efficiently.\n  \n- **Scalability Strategies**:\n  - Load balancing across services via API gateways.\n  - Utilizing global secondary indexes (GSI) to manage complex queries, especially for retrieving and cross-referencing posts and followers efficiently.\n\n#### System Optimization Strategies\n\n- **Fan-Out on Read vs. Write**:\n  - Initially employs reading all necessary data to compile a feed at request time.\n  - Proposes feed pre-computation to insert posts into a computed feed table, reducing real-time computation.\n\n- **Use of Asynchronous Processing**:\n  - Employs worker pools for handling bulk processing of follow relationships in the background, utilizing job queues to spread write load.\n\n- **Hot Shard Management**:\n  - Dynamically caches popular post data across distributed cache instances to evenly distribute request load beyond database capabilities.\n\n#### Deep Dives and Edge Considerations\n\n- **Scaling Challenges**:\n  - Recognizes the strain from users with extensive following lists or popular creators with wide-reaching posts.\n  - Discusses load mitigation tactics for sudden request spikes from popular posts.\n\n- **Fault Tolerance and Optimization**:\n  - Implements async tactics to decouple massive post handling from regular operations.\n  - Emphasizes the trade-offs between pre-computation and real-time computation to manage latency and throughput effectively.\n\n### Key Takeaways\n\n- **System Design Problems**:\n  - Building a system is about layering simplicity, then iterating to meet the scale.\n  - Efficient system design balances functionality, performance, and consistency with an eye on bottlenecks and potential failure points.\n\n- **Preparation Strategies**:\n  - Practice identifying bottlenecks, proposing solutions, and maintaining an iterative approach to problem-solving.\n  - Understand modern system design components like database structures, caching, and load distribution for scalability. \n\n- **Interview Technique**:\n  - Engaging with system design questions is as much about the process as the solution, highlighting reasoning, trade-offs, and adaptability.",
  "createdAt": "2025-07-14T01:23:51.296Z",
  "updatedAt": "2025-07-14T03:27:08.068Z",
  "keywords": [
    "system-design",
    "social-media",
    "frontend-system-design",
    "chat-messaging",
    "streaming-media",
    "code-editor",
    "interview-prep",
    "fan-out-on-read-vs.-write"
  ]
}