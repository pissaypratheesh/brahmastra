{
  "id": "md2f7mil2iazdutejb5",
  "topic": "Frontend System Design Questions ( Toast Component ) - HLD, LLD, Interview Experience, etc ðŸ”¥ðŸ”¥",
  "content": "### Filtered Resources\n\n1. [Frontend Interview Preparation Course](https://roadsidecoder.com/course-details)\n2. [Frontend System Design Interview Series](https://www.youtube.com/playlist?list=PLKhlp2qtUcSaSnNnNffRPIU3DRQ2xAdj8)\n3. [Source Code on GitHub](https://github.com/piyush-eon/frontend-interview-questions/tree/master/frontend-system-design-questions)\n4. [React JS Interview Series](https://www.youtube.com/playlist?list=PLKhlp2qtUcSYQojD5G-ElgHezoCyq2Hgo)\n5. [Complete Data Structures and Algorithms with JS Course](https://www.youtube.com/playlist?list=PLKhlp2qtUcSZtJefDThsXcsAbRBCSTgW4)\n6. [JS Interview Series](https://www.youtube.com/watch?v=oUWRxJ19gfE&list=PLKhlp2qtUcSaCVJEt4ogEFs6I41pNnMU5&index=1)\n\n### Video Overview\n\nThe video is part of a series dedicated to front-end system design, focusing on building a scalable Toast or Notification Component. It begins with a problem statement that was posed during a frontend interview, requiring the design of a scalable toast component. The presenter discusses key aspects of the design process, including requirement gathering, high-level design (HLD), low-level design (LLD), and optimization. The goal is to equip viewers with strategies and techniques for tackling similar system design questions in interviews, specifically in the context of React JS and JavaScript.\n\n### Detailed Technical Content\n\n#### Problem Statement\n- The task is to design a **scalable toast component**, commonly used for displaying transient messages or notifications.\n- The toast must handle four different variants: **success**, **info**, **warning**, and **error**.\n\n#### Requirement Gathering\n- **Functional Requirements**:\n  - Should support multiple toast types: success, info, warning, and error.\n  - Each toast should be customizable with properties like **message, duration, animation type**, and **position**.\n  - Three animation types are needed: **fade, pop,** and **slide**.\n  - It must allow toasts to appear in various positions on the screen such as **top-left**, **top-right**, **bottom-left**, etc.\n  - Include a **close button** for manual dismissal.\n  - Support **stacking behaviors** for multiple simultaneous notifications.\n  - Implement a **notification queue** when multiple toasts are triggered.\n\n- **Non-Functional Requirements**:\n  - Efficiency and lightweight nature for smooth performance.\n  - Accessibility compliance, such that all users, including those with disabilities, can utilize the toast effectively.\n  - Compatibility with modern web browsers.\n  - Scalability in design for easy future feature enhancements.\n\n#### High-Level Design (HLD)\n- The toast component is envisioned as a **rectangular UI element** with customizable icons and text based on the notification type.\n- Diagrams included:\n  - Example layouts for different toast types (success with a tick mark, error with a red X, etc.).\n  - Flow diagrams showing how data moves throughout the app, which is essential for complex integrations.\n\n#### Low-Level Design (LLD) / Implementation\n- Initial setup involves creating a React application, removing unnecessary files, and setting up the codebase.\n- Design a **custom React Hook** named  to encapsulate toast logic.\n  - It handles positions, rendering, and provides a management function for notifications.\n  \n- **Notification Component**: \n  - Set up with React to take , , and an  function as props.\n  - Uses **React Icons library** for type representation, involving conditional rendering.\n\n- **Styling**: \n  - Basic CSS for alignment and design consistency, using Flexbox for layout structure.\n  - Type-specific styles to reflect different notification backgrounds (green for success, red for error, etc.).\n\n#### Notification Logic and Custom Hook\n- The Hook :\n  - **useState** for managing notification state.\n  - **useCallback** to optimize function references and prevent unnecessary re-renders.\n  - Manages a queue to handle multiple notifications with timing controlled through **setTimeout**.\n  \n- **Trigger Function**:\n  - Allows for dynamic activation of notifications with chosen parameters (type, message, duration).\n\n#### Optimization Techniques\n- Addressed timing bugs with **clearTimeout** to reset timer on each notification trigger.\n- Considered **advanced optimizations** like memoization for functions to handle persistent state and performance improvements.\n- Discussed possibilities of adding **TypeScript** to enhance development inferences and recommendations.\n\n#### Advanced Features and Future Development\n- Suggestions for implementing **animation effects** and stacking behaviors through CSS transformations.\n- Highlighted the possibility of enhanced accessibility features through keyboard navigation.\n- Made a prompt for transitioning the current JavaScript implementation into TypeScript for better type management, error reduction, and improved maintainability.\n\n### Key Takeaways\n- System design of a toast component includes both functional aspects, user interaction details, and non-functional components like efficiency and accessibility.\n- The importance of both HLD and LLD in delivering a robust and scalable architecture was emphasized.\n- Effective requirement gathering leads to thorough design decisions that can accommodate future enhancements effortlessly.\n- Advanced JavaScript tools like **useCallback, React Hooks**, and **TypeScript** play essential roles in optimizing and maintaining scalable, efficient systems.",
  "createdAt": "2025-07-14T01:24:22.845Z",
  "updatedAt": "2025-07-14T01:24:22.845Z",
  "tags": [
    "react",
    "javascript",
    "typescript",
    "java",
    "frontend-system-design",
    "system-design",
    "interview-prep",
    "streaming-media",
    "code-editor"
  ]
}