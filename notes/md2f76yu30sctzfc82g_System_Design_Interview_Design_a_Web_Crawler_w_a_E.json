{
  "id": "md2f76yu30sctzfc82g",
  "topic": "System Design Interview: Design a Web Crawler w/ a Ex-Meta Staff Engineer",
  "content": "# Filtered Video Resources\n\n## Table of Contents\n1. [Filtered Video Resources](#filtered-video-resources)\n   - [Detailed Write-Up of the Problem](#detailed-write-up-of-the-problem)\n   - [System Design In a Hurry](#system-design-in-a-hurry)\n   - [Excalidraw Diagrams](#excalidraw-diagrams)\n   - [Related Video Breakdowns](#related-video-breakdowns)\n2. [Video Overview](#video-overview)\n3. [Detailed Technical Content](#detailed-technical-content)\n   - [1. Problem Definition](#1-problem-definition)\n   - [2. Functional Requirements](#2-functional-requirements)\n   - [3. Non-Functional Requirements](#3-non-functional-requirements)\n   - [4. System Design Roadmap](#4-system-design-roadmap)\n   - [5. High-Level Design](#5-high-level-design)\n   - [6. Deep Dives](#6-deep-dives)\n4. [Key Takeaways](#key-takeaways)\n\n---\n\n## 1. Filtered Video Resources\n\n### Detailed Write-Up of the Problem\n> **Web Crawler Design Guide**  \n> [Access the guide here](https://www.hellointerview.com/learn/system-design/answer-keys/web-crawler)\n\n### System Design In a Hurry\n> **Quick Introduction**  \n> [Introduction to system design](https://www.hellointerview.com/learn/system-design/in-a-hurry/introduction)\n\n### Excalidraw Diagrams\n> **Excalidraw Link**  \n> [View diagrams](https://link.excalidraw.com/l/56zGeHiLyKZ/9hC265dNFoo)\n\n### Related Video Breakdowns\n- [Ticketmaster System Design](https://www.youtube.com/watch?v=fhdPyoO6aXI)\n- [Uber System Design](https://www.youtube.com/watch?v=lsKU38RKQSo)\n- [Dropbox System Design](https://www.youtube.com/watch?v=_UZ1ngy-kOI)\n- [Ad Click Aggregator Design](https://youtu.be/Zcv_899yqhI)\n\n[Back to Top](#table-of-contents)\n\n---\n\n## 2. Video Overview\n\nThis video is a comprehensive guide on designing a web crawler, a common system design interview question asked at top tech companies like Meta, Google, Amazon, and Microsoft. \n\n***Evan***, a former Meta Staff Engineer and co-founder of Hello Interview, shares his insights on tackling this problem efficiently in an interview setting. It targets aspiring software engineers preparing for interviews, particularly in high-stakes environments like FAANG companies.\n\n[Back to Top](#table-of-contents)\n\n---\n\n## 3. Detailed Technical Content\n\n### 1. Problem Definition\n- **Goal**: Design a web crawler to extract text data from the web for training a large language model (LLM) like ChatGPT.\n- **Constraints**: The crawler must run for only **five days** and efficiently handle up to **10 billion web pages** with an average size of **2 MB** each.\n- **Resources**: Assume access to substantial, but reasonable, computational resources.\n\n### 2. Functional Requirements\n- Crawl the web starting from **seed URLs**.\n- Extract and store **text data** from these websites.\n\n### 3. Non-Functional Requirements\n- **Fault Tolerance**: The system must handle failures robustly to avoid losing progress.\n- **Politeness**: Adhere to websites' `robots.txt` files to prevent server overloads.\n- **Scalability**: Must efficiently scale to handle the vast number of pages.\n- **Efficiency**: Complete the crawl within the five-day constraint.\n\n### 4. System Design Roadmap\n#### Core Entities\n- **Text Data**: The collected data output.\n- **URL Metadata**: Information regarding crawled or pending URLs.\n- **Domain Metadata**: For compliance with `robots.txt`.\n\n#### Interface & Data Flow\n- **Input**: Seed URLs.\n- **Output**: Parsed text data.\n\n#### Steps:\n1. Resolve URL DNS.\n2. Fetch pages.\n3. Extract text/URLs.\n4. Store text.\n5. Repeat.\n\n### 5. High-Level Design\n- **Queue System**: **Frontier queue** (e.g., Kafka, SQS) to manage URLs.\n- **Worker System**: **Crawler workers** fetch URLs, extract content, and update the queue.\n- **Storage System**: Use **blob storage** (e.g., S3) for storing extracted text data.\n\n### 6. Deep Dives\n- **Enhancing Fault Tolerance**: Split responsibilities for improved fault isolation and scalability.\n- **Politeness System**:",
  "createdAt": "2025-07-14T01:24:02.694Z",
  "updatedAt": "2025-07-14T11:00:09.850Z",
  "keywords": [
    "kafka",
    "system-design",
    "file-storage",
    "web-crawler",
    "chat-messaging",
    "e-commerce",
    "streaming-media",
    "code-editor",
    "progress-components",
    "interview-prep"
  ]
}