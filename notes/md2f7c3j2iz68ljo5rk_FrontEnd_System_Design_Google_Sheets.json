{
  "id": "md2f7c3j2iz68ljo5rk",
  "topic": "[Front-End System Design] - Google Sheets",
  "content": "## 1. Filtered Resources\n\n- **[Diagram Link](https://viewer.diagrams.net/?tags=%7B%7D&highlight=0000ff&edit=_blank&layers=1&nav=1&title=GSheet-System-Design.drawio#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D1Ca3fmVk-UDWlfhj_Mf6G4d4hl-zJqt6L%26export%3Ddownload)**\n- **[Telegram](https://t.me/frontend_engineer_blog)**\n- **[Medium](https://evgeniiray.medium.com/)**\n- **[LinkedIn](https://www.linkedin.com/in/evgenii-ray/)**\n\n## 2. Video Overview\n\nThis video is part of a front-end system design series focusing on building a Google Sheet-like application. The series emphasizes the complexities involved in designing such applications due to the numerous design decisions and technical constraints present. It delves into the algorithms necessary for dependency resolution between cells and how to structure the UI components effectively. The video explains each step from understanding requirements to implementation, including challenges and technical considerations involved in rendering, virtualisation, formula parsing, and state management.\n\n## 3. Detailed Technical Content\n\n### General and Specific Requirements\n\n**General Requirements:** The goal is to implement a safe and ideal spreadsheet application capable of basic formatting (bold, inline, strikethrough, etc.) while supporting a large spreadsheet size. It should also handle formula parsing, row and column size adjustment, and accessibility.\n\n**Specific Requirements:** The application should operate on various devices (tablets, phones, laptops) with good performance, resembling offline applications without noticeable loading spikes. The state management must withstand dynamic changes, with a focus on efficiency and accessibility.\n\n### Design Considerations and Rendering Engine\n\nThe primary design decision involves choosing between two rendering engines: canvas and DOM. \n\n- **Canvas Rendering:** This method is GPU accelerated, providing optimized performance across devices and potentially higher FPS. However, it requires complex abstractions over canvas primitives, making it more costly in terms of development and requires specialized skills.\n\n- **DOM Rendering:** More standard and easier to develop with familiar approaches, it provides better accessibility using appropriate tags and attributes. Potential downsides include memory and CPU load issues with large DOM elements, affecting performance.\n\nFor this design, the decision is to use the DOM approach due to its development simplicity and cost-effectiveness.\n\n### Components and Virtualization\n\n**High-level Component Hierarchy:** The application is built around a structured hierarchy starting with a root sheet app that contains a table editor. The table editor encompasses the control panel and a cell cluster composed of rows and cells.\n\n**Virtualization:** This technique is crucial for handling large data efficiently. For instance, with a potential size of 26 columns by 1000 rows, achieving optimized DOM performance through vertical virtualization is critical. Horizontal virtualization is not mandatory but can be applied up to 72 columns to maintain performance. Elements are dynamically loaded, optimized through vertical virtualization, and scaled based on viewport constraints.\n\n### Dependency Resolving and Formula Parsing\n\nDependency resolution involves interpreting cell dependencies as directed acyclic graphs. This representation enables the use of topological sorting to sequence calculations correctly, detecting cycles to prevent redundant computations.\n\n**Formula Parsing:** Parsing includes interpreting and executing formula strings by breaking them into tokens and applying known arithmetic algorithms like Dijkstraâ€™s Shunting Yard. Function mapping dynamically loads only the necessities, minimizing code bulk.\n\n### State Management\n\nState management utilizes a flattened map, correlating rows and columns with their data. Each cell maintains attributes like formula, calculated value, and type. State changes trigger recalculation sequences, involving dependency resolvers and formula parsers, to update cell contents seamlessly.\n\n### Optimization Strategies\n\nOptimization ensures resource-efficient rendering without network overheads, using web workers for asynchronous operations, CSS transformations to prevent reflows, and virtualization to manage DOM performance. Minification in processes ensures efficient asset delivery.\n\n### Accessibility\n\nDesign adheres to HTML5 defaults for accessibility. Where necessary, roles and attributes are defined explicitly to ensure screen readers and other assistive technologies interpret content correctly. Complementing UI/UX requirements demand keyboard navigation support through shortcuts and tailored query finds.\n\n## 4. Key Takeaways\n\n- **Engine Decision:** Select an appropriate rendering engine (DOM vs. Canvas) based on scale and resource availability.\n- **Virtualization and Performance:** Implement virtualization to handle scalability and performance, tailoring approaches to viewport constraints.\n- **Dependency Resolution:** Employ topological sorting to manage dependency calculation orders, ensuring stability in formula evaluation.\n- **State Management:** Keep state simple yet effective, focusing on dynamism in formula processing.\n- **Optimization Focus:** Lay importance on asynchronous processing and streamlined rendering to maintain UI responsiveness.\n- **Enhancing Accessibility:** Balance standard HTML5 structures with ARIA roles for optimum accessibility, ensuring UI compliance with user-friendly interaction principles.\n\nThis comprehensive technical analysis articulates a systemic approach to designing a front-end application inspired by Google Sheets, illustrating critical decision-making and problem-solving strategies.",
  "createdAt": "2025-07-14T01:24:09.343Z",
  "updatedAt": "2025-07-14T03:27:08.086Z",
  "keywords": [
    "system-design",
    "frontend-system-design",
    "progress-components",
    "streaming-media",
    "social-media",
    "file-storage",
    "code-editor"
  ]
}