{
  "id": "md2f6fl3kaj3ejkuurr",
  "topic": "Google Interview Question | System Design: Digital Wallet (3+ Approaches)",
  "content": "### Filtered Resources\n\n1. **Excalidraw File**: Technical diagrams provided for the digital wallet system - [Excalidraw](https://excalidraw.com/#json=-oXaQNSRHQcnKD2IEjr3U,5z2SuUGkfQqHP1Q0SPF4KQ)\n2. **Screenshots of Diagrams**: [Imgur Album](https://imgur.com/a/gTifm2B)\n3. **Text File Transcript**: [Pastebin](https://pastebin.com/9i0KNTPx)\n\n---\n\n### Video Overview\n\nThe YouTube session focuses on designing a **Digital Wallet System** with an emphasis on robust data management and transaction handling strategies suitable for a million transactions per second (TPS). It critically examines an alternative to Raft, preferring a **Saga pattern** for managing distributed transactions. Further, the video deals with achieving strong read consistency and delving into database schema design, usage of sharding, and handling edge cases for financial transactions.\n\n---\n\n### Detailed Technical Content\n\n#### Introduction to Digital Wallet Systems\n\nIn the session, a digital wallet is conceptualized as a service allowing quick transfer of funds between user accounts similar to Venmo or PayPal. The focus is a Google interview-grade question requiring a scalable design to handle a million TPS effectively.\n\n#### High-Level Architecture Design\n\nThe speaker proposes the architecture should consist of two primary services:\n1. **Transaction Service** – Manages transaction records.\n2. **Wallet Service** – Maintains the balance of user accounts.\n\n#### Primary Concepts and Approaches\n\n**1. Saga Pattern**: \n- Utilizes the Saga pattern instead of Raft to handle distributed transactions. This approach involves running a series of operations with the capability to perform compensating transactions in the case of failure. This choice helps achieve eventual consistency while allowing rollback in parts of a transaction journey.\n\n**2. Database Design and Schema**:\n- **Transactional DB** and **Wallet DB** are the core databases. Transactions DB handles incoming and outgoing transactions, while Wallet DB manages account balances.\n- Each transaction requires atomicity, so the architecture proposes cross-table transactions while storing key transaction components like sender, receiver, amount, and ID.\n\n**3. Item Potency and Consistency**:\n- Incorporated via unique keys and proper sharding to ensure once-and-only-once delivery semantics. \n- The architecture suggests using Read-After-Write consistency for strong read guarantees, especially for senders checking their transactions instantaneously.\n\n**4. Change Data Capture (CDC) with DB Triggers**:\n- CDC allows for efficient data distribution across services and ensures that analytical queries can be offloaded to an OLAP database which captures changes from main DBs, allowing OLAP operations without affecting OLTP performance.\n\n#### Handling Scalability and Edge Cases\n\n**1. Sharding Strategy**:\n- The approach revolves around using account IDs as partition keys, avoiding hot partitions through advanced concepts like sharded counters for large wallet balances.\n- Concurrency is addressed by ensuring no two concurrent transactions result in over-withdrawal due to ordering and stepwise execution.\n\n**2. Failure and Retry Mechanisms**:\n- Step Functions or Lambda function orchestration offers fault tolerance through retries or compensating transactions to maintain data integrity across services.\n- Each service expects to fail gracefully, either rollback or provide actionable insights about transaction status via status flags.\n\n**3. Transaction Isolation**:\n- Approaching transaction handling with dynamically managed sharding keys such as shard counter IDs for high-volume accounts, mitigating issues with single high-traffic keys.\n\n#### Technical Implementation Strategies\n\n**1. Lambda Functions for Orchestration**:\n- Employ AWS Lambdas or step functions for managing transaction workflows across services, allowing for asynchronous execution and compensation tasks if a transaction part fails.\n\n**2. Schema Design Adjustments**:\n- The schema is adapted to manage duplicate transactions and inconsistencies through IDempotency keys and partition keys tailored for dynamic workload allocation.\n\n**3. Multi-Tiered Storage Model**:\n- Utilize hybrid models combining NoSQL (DynamoDB or CockroachDB) and traditional RDBMS (Manually Sharded PostgreSQL) as per use-case specifics for balance and transaction data respectively.\n\n### Key Takeaways\n\n1. **Saga Patterns** enable handling complex distributed transactions without the coordination overhead that traditional consensus algorithms like Raft require.\n   \n2. Strategic **use of sharding** based on account IDs and CCD processes safeguards against overload and ensures real-time data propagation.\n\n3. Proper handling of **item potency** and **strong read consistency** elevate user experience by ensuring data accuracy and reliability without delays typical of financial systems.\n\n4. Designing for failure through **orchestration workflows** appreciates the complexity of distributed systems, enabling seamless error handling and rollback capabilities.\n\n5. The document synthesizes key principles for digital wallets focusing on **resilience through architecture**, leading to a mix of modern data handling techniques to support high-scale financial services. \n\nThis collective technical foundation provides clear breadth and depth for creating a robust digital wallet framework catering to both the complexities and scale often demanded in real-world applications.",
  "createdAt": "2025-07-14T01:23:27.207Z",
  "updatedAt": "2025-07-14T01:23:27.207Z",
  "tags": [
    "postgresql",
    "aws",
    "Saga pattern",
    "sharding strategy",
    "transaction isolation",
    "Change Data Capture",
    "item potency",
    "Lambda functions",
    "database schema",
    "strong read consistency",
    "2-phase-commit",
    "try-confirm-cancel (tc/c))",
    "database indexing",
    "query optimization",
    "ACID properties",
    "system-design",
    "financial-systems",
    "chat-messaging",
    "streaming-media",
    "file-storage",
    "code-editor",
    "interview-prep"
  ]
}